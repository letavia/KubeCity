apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  labels:
    app: {{ template "mongodb-replicaset.name" . }}
    chart: {{ template "mongodb-replicaset.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    {{- if .Values.extraLabels }}
    {{ toYaml .Values.extraLabels | indent 4 }}
    {{- end }}
  name: {{ template "mongodb-replicaset.fullname" . }}
spec:
  selector:
    matchLabels:
      app: {{ template "mongodb-replicaset.name" . }}
      release: {{ .Release.Name }}
  serviceName: {{ template "mongodb-replicaset.fullname" . }}
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "mongodb-replicaset.name" . }}
        release: {{ .Release.Name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.metrics.port | quote }}
        prometheus.io/path: {{ .Values.metrics.path | quote }}
        {{- if .Values.version }}
        version: {{ .Values.version }}
    spec:
      securityContext:
      initContainers:
        - name: copy-config
          image: busybox
          command:
            - "sh"
          args:
            - "-c"
            - |
              set -e
              set -x
              cp /configdb-readonly/mongod.conf /data/configdb/mongod.conf
              cp /ca-readonly/tls.key /data/configdb/tls.key
              cp /ca-readonly/tls.crt /data/configdb/tls.crt
              cp /keydir-readonly/key.txt /data/configdb/key.txt
              chmod 600 /data/configdb/key.txt
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: config
              mountPath: /configdb-readonly
            - name: configdir
              mountPath: /data/configdb
            - name: ca
              mountPath: /ca-readonly
            - name: keydir
              mountPath: /keydir-readonly
        - name: install
          image: "{{ .Values.installImage.repository }}:{{ .Values.installImage.tag }}"
          args:
            - --work-dir=/work-dir
          imagePullPolicy: "{{ .Values.installImage.pullPolicy }}"
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
        - name: bootstrap
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command:
            - /work-dir/peer-finder
          args:
            - -on-start=/init/on-start.sh
            - "-service={{ template "mongodb-replicaset.fullname" . }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: {{ .Values.replicaSetName }}
            - name: AUTH
              value: "true"
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ template "mongodb-replicaset.adminSecret" . }}"
                  key: user
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ template "mongodb-replicaset.adminSecret" . }}"
                  key: password
            - name: METRICS
              value: "true"
            - name: METRICS_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ template "mongodb-replicaset.metricsSecret" . }}"
                  key: user
            - name: METRICS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ template "mongodb-replicaset.metricsSecret" . }}"
                  key: password
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: init
              mountPath: /init
            - name: configdir
              mountPath: /data/configdb
            - name: datadir
              mountPath: /data/db
      containers:
        - name: {{ template "mongodb-replicaset.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          env:
          ports:
            - name: mongodb
              containerPort: 27017
          resources:
          command:
            - mongod
          args:
            - --config=/data/configdb/mongod.conf
            - --dbpath=/data/db
            - --replSet={{ .Values.replicaSetName }}
            - --port=27017
            - --bind_ip=0.0.0.0
            - --auth
            - --keyFile=/data/configdb/key.txt
            - --sslMode=requireSSL
            - --sslCAFile=/data/configdb/tls.crt
            - --sslPEMKeyFile=/work-dir/mongo.pem
          livenessProbe:
            exec:
              command:
                - mongo
                - --ssl
                - --sslCAFile=/data/configdb/tls.crt
                - --sslPEMKeyFile=/work-dir/mongo.pem
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          readinessProbe:
            exec:
              command:
                - mongo
                - --ssl
                - --sslCAFile=/data/configdb/tls.crt
                - --sslPEMKeyFile=/work-dir/mongo.pem
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          volumeMounts:
            - name: datadir
              mountPath: /data/db
            - name: configdir
              mountPath: /data/configdb
            - name: workdir
              mountPath: /work-dir
        - name: metrics
          image: "{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}"
          imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
          command:
            - sh
            - -ec
            - >-
              export MONGODB_URL=mongodb://$METRICS_USER:$METRICS_PASSWORD@localhost:{{ .Values.port }};
              export MONGODB_URL=mongodb://localhost:{{ .Values.port }};
              /bin/mongodb_exporter
              -mongodb.tls
              -mongodb.tls-ca=/ca/tls.crt
              -mongodb.tls-cert=/work-dir/mongo.pem
              -mongodb.socket-timeout={{ .Values.metrics.socketTimeout }}
              -mongodb.sync-timeout={{ .Values.metrics.syncTimeout }}
              -web.metrics-path={{ .Values.metrics.path }}
              -web.listen-address=:{{ .Values.metrics.port }}
          volumeMounts:
            - name: ca
              mountPath: /ca
              readOnly: true
            - name: workdir
              mountPath: /work-dir
              readOnly: true
          env:
            - name: METRICS_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ template "mongodb-replicaset.metricsSecret" . }}"
                  key: user
            - name: METRICS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ template "mongodb-replicaset.metricsSecret" . }}"
                  key: password
          ports:
            - name: metrics
              containerPort: {{ .Values.metrics.port  }}
          resources:
          livenessProbe:
            exec:
              command:
                - sh
                - -ec
                - >-
                  export MONGODB_URL=mongodb://$METRICS_USER:$METRICS_PASSWORD@localhost:{{ .Values.port }};
                  export MONGODB_URL=mongodb://localhost:{{ .Values.port }};
                  /bin/mongodb_exporter
                  -mongodb.tls
                  -mongodb.tls-ca=/ca/tls.crt
                  -mongodb.tls-cert=/work-dir/mongo.pem
                  -test
              initialDelaySeconds: 30
              periodSeconds: 10
      nodeSelector:
      affinity:
      tolerations:
      volumes:
        - name: config
          configMap:
            name: {{ template "mongodb-replicaset.fullname" . }}-mongodb
        - name: init
          configMap:
            defaultMode: 0755
            name: {{ template "mongodb-replicaset.fullname" . }}-init
        - name: ca
          secret:
            defaultMode: 0400
            secretName: {{ template "mongodb-replicaset.fullname" . }}-ca
        - name: keydir
          secret:
            defaultMode: 0400
            secretName: {{ template "mongodb-replicaset.keySecret" . }}
        - name: workdir
          emptyDir: {}
        - name: configdir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
        {{- range $key, $value := .Values.persistentVolume.annotations }}
          {{ $key }}: {{ $value }}
      spec:
        accessModes:
        resources:
          requests:
            storage: {{ .Values.persistentVolume.size | quote }}
        storageClassName: ""
        storageClassName: "{{ .Values.persistentVolume.storageClass }}"
        - name: datadir
          emptyDir: {}